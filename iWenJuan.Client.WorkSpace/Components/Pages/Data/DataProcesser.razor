@page "/data-processer/{FileId}"
@using System.Text
@using System.Globalization

@inject NavigationManager Navigation
@inject IHttpClientFactory httpClientFactory

@code {
	[Parameter]
	public string FileId { get; set; }

	private HttpClient _DataStorage = default!;
	private HttpClient _DataProcessing = default!;

	private StoredFileInfoDto fileInfo = default!;
	private List<string> headers = [];
	private List<Dictionary<string, string>> fileData = [];

	protected override async Task OnInitializedAsync()
	{
		_DataStorage = httpClientFactory.CreateClient("DataStoreService");
		_DataProcessing = httpClientFactory.CreateClient("DataProcessingService");
		await LoadData();
	}

	private async Task LoadData()
	{
		fileInfo = await _DataStorage.GetFromJsonAsync<StoredFileInfoDto>($"api/FileStorage/file/{FileId}/info") ?? default!;

		// 获取文件数据
		var fileBytes = await _DataStorage.GetByteArrayAsync($"api/FileStorage/file/{FileId}/data");

		// 解析CSV文件
		using var reader = new StreamReader(new MemoryStream(fileBytes), Encoding.UTF8);
		using var csv = new CsvHelper.CsvReader(reader, CultureInfo.InvariantCulture);

		// 读取表头
		if (csv.Read() && csv.ReadHeader())
		{
			headers = csv.HeaderRecord!.ToList();
		}
		// 读取数据
		// while (csv.Read())
		// {
		// 	var record = csv.GetRecord<dynamic>() as IDictionary<string, object>;
		// 	var dict = new Dictionary<string, string>();
		// 	foreach (var header in headers)
		// 	{
		// 		dict[header] = record[header]?.ToString() ?? string.Empty;
		// 	}
		// 	fileData.Add(dict);
		// }
	}
}

<PageTitle>数据处理</PageTitle>

<FluentStack Orientation="Orientation.Horizontal"
			 HorizontalAlignment="HorizontalAlignment.SpaceBetween">
	<FluentStack Orientation=Orientation.Vertical
				 Width="20%">
		<FluentLabel Typo="Typography.H4">数据信息</FluentLabel>
		<FluentCard>
@* 			<FluentLabel>@FileId</FluentLabel>
			@if (fileInfo != null)
			{
				<FluentLabel>@fileInfo.FileName</FluentLabel>
				<FluentLabel>@fileInfo.ContentType</FluentLabel>
				<FluentLabel>@fileInfo.CreatedAt</FluentLabel>
			} *@

			<FluentTextField Value="FileId" Label="数据ID" ReadOnly="true" Style="width: 100%;"></FluentTextField>
			@if (fileInfo != null)
			{
				<FluentTextField Value="@fileInfo.FileName" Label="文件名" ReadOnly="true" Style="width: 100%;"></FluentTextField>
				<FluentTextField Value="@fileInfo.ContentType" Label="文件类型" ReadOnly="true" Style="width: 100%;"></FluentTextField>
				<FluentTextField Value="@fileInfo.CreatedAt.ToString()" Label="创建时间" ReadOnly="true" Style="width: 100%;"></FluentTextField>
			}
		</FluentCard>

		<FluentDivider Style="width: 100%;" Role="DividerRole.Presentation"></FluentDivider>

		<FluentLabel Typo="Typography.H4">操作</FluentLabel>
		<FluentCard>
@* 			<FluentMenuButton Text="添加处理" OnMenuChanged="@HandleOnMenuChanged">
				<FluentMenuItem Id="0">Default</FluentMenuItem>

				@foreach (var csvOperationType in (CsvOperationType[]) Enum.GetValues(typeof(CsvOperationType)))
				{
					<FluentMenuItem Id="@csvOperationType.ToString()">@csvOperationType.GetDisplayName()</FluentMenuItem>
				}
			</FluentMenuButton> *@
			<FluentButton @onclick="ProcessCsvFile"
						  Appearance="Appearance.Accent"
						  Style="width:100%">处理数据</FluentButton>
		</FluentCard>

		<FluentDivider Style="width: 100%;" Role="DividerRole.Presentation"></FluentDivider>

		<FluentLabel Typo="Typography.H4">列名列表</FluentLabel>
		<FluentCard>
			<FluentStack Orientation="Orientation.Vertical">
				@foreach (var header in headers)
				{
					<FluentButton>@header</FluentButton>
				}
			</FluentStack>
		</FluentCard>
	</FluentStack>

	<FluentDivider Role="DividerRole.Presentation" Orientation="Orientation.Vertical"></FluentDivider>

	<FluentStack Orientation=Orientation.Vertical
				 Width="40%">
		<FluentLabel Typo="Typography.H4">处理队列</FluentLabel>

		@foreach (var operation in operations)
		{
			@* <OperationEditor @key="operation" Operation="operation" OnRemove="() => RemoveQuestion(operation)" /> *@
		}
	</FluentStack>

	<FluentDivider Role="DividerRole.Presentation" Orientation="Orientation.Vertical"></FluentDivider>

	<FluentStack Orientation=Orientation.Vertical
				 Width="20%">
		<FluentLabel Typo="Typography.H4">附加</FluentLabel>


	</FluentStack>

</FluentStack>

@code {
	private List<CsvOperation> operations = [];

	private void HandleOnMenuChanged(MenuChangeEventArgs args)
	{
		var operation = new CsvOperation
			{
				OperationType = (CsvOperationType) Enum.Parse(typeof(CsvOperationType), args.Id!),
			};
		operations.Add(operation);
	}

	private async Task ProcessCsvFile()
	{
		if (!operations.Any())
		{
			_ = "请添加至少一个操作";
			return;
		}

		var response = await _DataProcessing.PostAsJsonAsync($"api/CsvProcessing/process/{FileId}", operations);

		if (response.IsSuccessStatusCode)
		{
			var processedFile = await response.Content.ReadFromJsonAsync<StoredFileInfoDto>();

		}
		else
		{

		}
	}
}
