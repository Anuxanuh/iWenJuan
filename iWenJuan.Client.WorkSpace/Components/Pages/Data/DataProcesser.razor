@page "/data-processer/{FileId}"
@using System.Text
@using System.Globalization
@using System.Text.Json

@inject NavigationManager Navigation
@inject IDialogService DialogService
@inject IHttpClientFactory httpClientFactory
@inject ILogger<DataProcesser> Logger

@code {
	[Parameter]
	public string FileId { get; set; }

	private HttpClient _DataStorage = default!;
	private HttpClient _DataProcessing = default!;

	private StoredFileInfoDto fileInfo = default!;
	private List<string> headers = [];
	// private List<Dictionary<string, string>> fileData = [];

	protected override async Task OnInitializedAsync()
	{
		_DataStorage = httpClientFactory.CreateClient("DataStoreService");
		_DataProcessing = httpClientFactory.CreateClient("DataProcessingService");
		await LoadData();
	}

	private async Task LoadData()
	{
		fileInfo = await _DataStorage.GetFromJsonAsync<StoredFileInfoDto>($"api/FileStorage/file/{FileId}/info") ?? default!;

		// 获取文件数据
		var fileBytes = await _DataStorage.GetByteArrayAsync($"api/FileStorage/file/{FileId}/data");

		// 解析CSV文件
		using var reader = new StreamReader(new MemoryStream(fileBytes), Encoding.UTF8);
		using var csv = new CsvHelper.CsvReader(reader, CultureInfo.InvariantCulture);

		// 读取表头
		if (csv.Read() && csv.ReadHeader())
		{
			headers = csv.HeaderRecord!.ToList();
		}
		// 读取数据
		// while (csv.Read())
		// {
		// 	var record = csv.GetRecord<dynamic>() as IDictionary<string, object>;
		// 	var dict = new Dictionary<string, string>();
		// 	foreach (var header in headers)
		// 	{
		// 		dict[header] = record[header]?.ToString() ?? string.Empty;
		// 	}
		// 	fileData.Add(dict);
		// }
	}
}
<FluentMenuProvider />

<PageTitle>数据处理</PageTitle>

<FluentStack Orientation="Orientation.Horizontal"
			 HorizontalAlignment="HorizontalAlignment.SpaceBetween">
	<FluentStack Orientation=Orientation.Vertical
				 Width="20%">
		<FluentLabel Typo="Typography.H4">数据信息</FluentLabel>
		<FluentCard>
			<FluentTextField Value="@FileId" Label="数据ID" ReadOnly="true" Style="width: 100%;"></FluentTextField>
			@if (fileInfo != null)
			{
				<FluentTextField Value="@fileInfo.FileName" Label="文件名" ReadOnly="true" Style="width: 100%;"></FluentTextField>
				<FluentTextField Value="@fileInfo.ContentType" Label="文件类型" ReadOnly="true" Style="width: 100%;"></FluentTextField>
				<FluentTextField Value="@fileInfo.CreatedAt.ToString()" Label="创建时间" ReadOnly="true" Style="width: 100%;"></FluentTextField>
			}
		</FluentCard>

		<FluentDivider Style="width: 100%;" Role="DividerRole.Presentation"></FluentDivider>

		<FluentLabel Typo="Typography.H4">操作</FluentLabel>
		<FluentCard>
			<FluentStack>
				<FluentMenuButton @ref=menubutton Text="添加处理步骤" OnMenuChanged="@HandleOnMenuChanged">
					@foreach (var csvOperationType in (CsvOperationType[]) Enum.GetValues(typeof(CsvOperationType)))
					{
						<FluentMenuItem Id="@csvOperationType.ToString()">@csvOperationType.GetDisplayName()</FluentMenuItem>
					}
				</FluentMenuButton>

				<FluentButton @onclick="ProcessCsvFile"
							  Appearance="Appearance.Accent">处理数据</FluentButton>
			</FluentStack>


		</FluentCard>
	</FluentStack>

	<FluentDivider Role="DividerRole.Presentation" Orientation="Orientation.Vertical"></FluentDivider>

	<FluentStack Orientation=Orientation.Vertical
				 Width="40%">
		<FluentLabel Typo="Typography.H4">处理队列</FluentLabel>

		@foreach (var operation in operations)
		{
			<OperationEditor @key="operation" Operation="operation" Headers="headers" OnRemove="() => RemoveOperation(operation)" />
		}
	</FluentStack>

	<FluentDivider Role="DividerRole.Presentation" Orientation="Orientation.Vertical"></FluentDivider>

	<FluentStack Orientation=Orientation.Vertical
				 Width="20%">
		<FluentLabel Typo="Typography.H4">列名列表</FluentLabel>
		<FluentCard>
			<FluentStack Orientation="Orientation.Vertical">
				@foreach (var header in headers)
				{
					<FluentButton>@header</FluentButton>
				}
			</FluentStack>
		</FluentCard>
	</FluentStack>
</FluentStack>

<FluentOverlay @bind-Visible=progressRingVisible
			   Dismissable="false"
			   FullScreen="true"
			   Opacity="0.4">
	<FluentProgressRing Width="128px" />
</FluentOverlay>

@code {
	private FluentMenuButton menubutton = new();
	private List<CsvOperation> operations = [];

	private void HandleOnMenuChanged(MenuChangeEventArgs args)
	{
		var operation = new CsvOperation
			{
				OperationType = (CsvOperationType) Enum.Parse(typeof(CsvOperationType), args.Id!),
				Column = headers.FirstOrDefault()!,
			};
		operations.Add(operation);
	}

	private void RemoveOperation(CsvOperation operation)
	{
		operations?.Remove(operation);
	}

	private async Task ProcessCsvFile()
	{
		// 显示加载动画
		progressRingVisible = true;

		Logger.LogInformation("处理操作: {CsvOperation}", JsonSerializer.Serialize(operations));

		try
		{
			if (!operations.Any())
			{
				_ = "请添加至少一个操作";
				return;
			}

			foreach (var operation in operations)
			{
				switch (operation.OperationType)
				{
					case CsvOperationType.Select:
						if (string.IsNullOrEmpty(operation.Column))
							await DialogService.ShowErrorAsync("请选择至少一个列", "错误");
						break;
					case CsvOperationType.Filter:
						operation.Condition ??= Operator.Equals;
						if (string.IsNullOrEmpty(operation.Column) || string.IsNullOrEmpty(operation.Value))
							await DialogService.ShowErrorAsync("请填写完整的过滤条件", "错误");
						break;
					case CsvOperationType.OrderBy:
					case CsvOperationType.OrderByDescending:
						if (string.IsNullOrEmpty(operation.Column))
							await DialogService.ShowErrorAsync("请选择排序列", "错误");
						break;
					case CsvOperationType.GroupBy:
						break;
					case CsvOperationType.Aggregate:
						break;
				}
			}

			var response = await _DataProcessing.PostAsJsonAsync($"api/CsvProcessing/process/{FileId}", operations);

			if (response.IsSuccessStatusCode)
			{
				var processedFile = await response.Content.ReadFromJsonAsync<StoredFileInfoDto>();
				await DialogService.ShowSuccessAsync($"数据处理完成, 新文件{processedFile?.FileName}已保存到数据列表中", "处理成功");
			}
			else
			{
				await DialogService.ShowErrorAsync("数据处理失败", "处理失败");
			}

		}
		finally
		{
			// 隐藏加载动画
			progressRingVisible = false;
			StateHasChanged();
		}
	}

	private bool progressRingVisible = false;
}
