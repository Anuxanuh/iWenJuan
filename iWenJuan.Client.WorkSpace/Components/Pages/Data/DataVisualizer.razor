@using MudBlazor
@using System.Text
@using iWenJuan.Client.WorkSpace.Components.Custom
@using System.Globalization
@using System.Dynamic

@page "/data-visualizer/{FileId}"

@inject NavigationManager Navigation
@inject IHttpClientFactory httpClientFactory
@inject ILogger<DataVisualizer> _logger

@code {
	[Parameter]
	public string FileId { get; set; }

	private HttpClient _DataStorage = default!;
	private List<string> headers = [];
	private List<Dictionary<string, string>> fileData = [];

	private MainViewModel mainViewModel = new();

	protected override async Task OnInitializedAsync()
	{
		_DataStorage = httpClientFactory.CreateClient("DataStoreService");
		await LoadData();
	}
}


<PageTitle>数据可视化</PageTitle>

<FluentStack Orientation=Microsoft.FluentUI.AspNetCore.Components.Orientation.Vertical
			 Style="height:100%">
	<FluentLabel Typo=" Microsoft.FluentUI.AspNetCore.Components.Typography.H1">数据可视化</FluentLabel>

	<FluentSwitch Label="分析模式"
				  @bind-Value=mainViewModel.IsDirectAnalysisMode
				  @bind-Value:after=UpdateChart>
		<span slot="checked-message">直接分析模式</span>
		<span slot="unchecked-message">聚类分析模式</span>
	</FluentSwitch>

	<FluentStack>
		<FluentSelect ValueChanged="@SelectedChartTypeChanged" TOption="string">
			@foreach (var chartType in Enum.GetNames(typeof(ChartType)))
			{
				<FluentOption Value="@chartType">@chartType</FluentOption>
			}
		</FluentSelect>

		<FluentSelect Label="X轴标签"
					  TOption="string"
					  Items=headers
					  @bind-Value=mainViewModel.SelectedXAxisLabel
					  @bind-Value:after=UpdateChart />

		@if (mainViewModel.IsDirectAnalysisMode)
		{
			<FluentSelect Label="Y轴标签"
						  TOption="string"
						  Items=headers
						  @bind-Value=mainViewModel.SelectedYAxisLabel
						  @bind-Value:after=UpdateChart />
		}
	</FluentStack>

	<FluentDivider Style="width: 100%;" Role="DividerRole.Presentation"></FluentDivider>

	<FluentStack Style="height:100%">
		<FluentCard Width="60%">
			<FluentStack HorizontalAlignment="Microsoft.FluentUI.AspNetCore.Components.HorizontalAlignment.Center"
						 VerticalAlignment="Microsoft.FluentUI.AspNetCore.Components.VerticalAlignment.Center"
						 Style="height:100%">
				<MudChart ChartType="@mainViewModel.SelectedChartType"
						  InputData="@mainViewModel.Data"
						  InputLabels="@mainViewModel.Labels"
						  ChartSeries="@mainViewModel.ChartSeries"
						  XAxisLabels="@mainViewModel.Labels"
						  ChartOptions="@mainViewModel.Options"
						  AxisChartOptions="@mainViewModel.AxisChartOptions" />
			</FluentStack>
		</FluentCard>

		<FluentCard Width="40%">
			<FluentStack Orientation=Microsoft.FluentUI.AspNetCore.Components.Orientation.Vertical>

				<FluentSwitch ValueChanged="(v)=> mainViewModel.ShowDataMarkers = v" Label="数据标记"></FluentSwitch>

				<FluentDivider Style="width: 100%;" Role="DividerRole.Presentation"></FluentDivider>

				<FluentLabel Typo="Microsoft.FluentUI.AspNetCore.Components.Typography.H4">标签倾斜度</FluentLabel>
				<FluentSlider @bind-Value="mainViewModel.AxisChartOptions.LabelRotation" Min="0" Max="90" Step="15"></FluentSlider>

				<FluentLabel Typo="Microsoft.FluentUI.AspNetCore.Components.Typography.H4">线粗细度: @mainViewModel.Options.LineStrokeWidth.ToString()</FluentLabel>
				<FluentSlider @bind-Value="mainViewModel.Options.LineStrokeWidth" Min="1" Max="10" Step="0.1" />

				<FluentLabel Typo="Microsoft.FluentUI.AspNetCore.Components.Typography.H4">Y轴最大值: @mainViewModel.Options.YAxisTicks.ToString()</FluentLabel>
				<FluentSlider @bind-Value="mainViewModel.Options.YAxisTicks" Min="1" Max="400" Step="1"></FluentSlider>

				<FluentLabel Typo="Microsoft.FluentUI.AspNetCore.Components.Typography.H4">柱状图条宽</FluentLabel>
				<FluentSlider @bind-Value="mainViewModel.AxisChartOptions.StackedBarWidthRatio" Min="0.1" Max="2" Step="0.1"></FluentSlider>
			</FluentStack>
		</FluentCard>
	</FluentStack>
</FluentStack>

<FluentOverlay @bind-Visible=mainViewModel.ProgressRingVisible
			   Dismissable="false"
			   FullScreen="true"
			   Opacity="0.4">
	<FluentProgressRing Width="128px" />
</FluentOverlay>

@code {
	private void SelectedChartTypeChanged(string chartType)
	{
		mainViewModel.SelectedChartType = (ChartType) Enum.Parse(typeof(ChartType), chartType);
		UpdateChart();
	}

	private async Task LoadData()
	{
		// 获取文件数据
		var fileBytes = await _DataStorage.GetByteArrayAsync($"api/FileStorage/file/{FileId}/data");

		// 解析CSV文件
		using var reader = new StreamReader(new MemoryStream(fileBytes), Encoding.UTF8);
		using var csv = new CsvHelper.CsvReader(reader, CultureInfo.InvariantCulture);

		// 读取表头
		if (csv.Read() && csv.ReadHeader())
		{
			headers = csv.HeaderRecord!.ToList();
		}
		// 读取数据
		while (csv.Read())
		{
			var record = csv.GetRecord<dynamic>() as IDictionary<string, object>;
			var dict = new Dictionary<string, string>();
			foreach (var header in headers)
			{
				dict[header] = record[header]?.ToString() ?? string.Empty;
			}
			fileData.Add(dict);
		}
	}

	private void UpdateChart()
	{
		mainViewModel.ProgressRingVisible = true;

		if (mainViewModel.IsDirectAnalysisMode)
		{
			// 直接分析模式

			// 如果X轴或Y轴标签未选择，则不进行分析
			if (mainViewModel.SelectedXAxisLabel is null || mainViewModel.SelectedYAxisLabel is null)
			{
				mainViewModel.ProgressRingVisible = false;
				StateHasChanged();
				return;
			}
			// 加载数据到视图模型
			var oData = fileData.Where(d => d.CanConvertToDouble(mainViewModel.SelectedYAxisLabel!))
								.OrderBy(d => d[mainViewModel.SelectedXAxisLabel]);
			mainViewModel.Labels = oData.Select(d => d[mainViewModel.SelectedXAxisLabel]).ToArray();
			mainViewModel.Data = oData.Select(d => double.Parse(d[mainViewModel.SelectedYAxisLabel])).ToArray();
		}
		else
		{
			// 聚类分析模式

			// 如果X轴标签未选择，则不进行分析
			if (mainViewModel.SelectedXAxisLabel is null)
			{
				mainViewModel.ProgressRingVisible = false;
				StateHasChanged();
				return;
			}
			// 加载数据到视图模型
			var oData = fileData
				.Where(d => !string.IsNullOrEmpty(d[mainViewModel.SelectedXAxisLabel]))
				.GroupBy(d => d[mainViewModel.SelectedXAxisLabel])
				.Select(group => new
				{
					Key = group.Key!.ToString()!,
					Value = group.Count()
				})
				.OrderBy(item => item.Key);
			mainViewModel.Labels = oData.Select(d => d.Key).ToArray();
			mainViewModel.Data = oData.Select(d => (double) d.Value).ToArray();
		}

		mainViewModel.ProgressRingVisible = false;
		StateHasChanged();
	}
}
@code {
	internal class MainViewModel
	{
		public bool ProgressRingVisible { get; set; } = false;


		/// <summary>
		/// 分析模式
		/// true:	直接分析模式
		/// false:	聚类分析模式
		/// </summary>
		public bool IsDirectAnalysisMode { get; set; }
		/// <summary>
		/// 图表类型
		/// </summary>
		public ChartType SelectedChartType { get; set; }
		/// <summary>
		/// X轴
		/// </summary>
		public string SelectedXAxisLabel { get; set; }
		/// <summary>
		/// Y轴
		/// </summary>
		public string SelectedYAxisLabel { get; set; }

		public bool ShowDataMarkers { get; set; }

		public string[] Labels { get; set; } = [];

		public double[] Data { get; set; } = [];

		public List<ChartSeries> ChartSeries => new List<ChartSeries>()
			{
				new ChartSeries() { Name = SelectedXAxisLabel, Data = Data , ShowDataMarkers = ShowDataMarkers},
			};

		public ChartOptions Options = new ChartOptions();
		public AxisChartOptions AxisChartOptions = new AxisChartOptions();
	}
}
