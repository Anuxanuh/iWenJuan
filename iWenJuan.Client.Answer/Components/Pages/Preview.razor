@page "/preview/{SurveyId}"
@inject IHttpClientFactory httpClientFactory

@code {
	[Parameter] public string SurveyId { get; set; } = default!;
	private HttpClient _httpClient = default!;

	private SurveyDto survey = new();

	protected override async Task OnInitializedAsync()
	{
		_httpClient = httpClientFactory.CreateClient("SurveyService");

		if (SurveyId is not null)
		{
			survey = (await _httpClient.GetFromJsonAsync<SurveyDto>($"api/surveys/{SurveyId}"))!;
			answers = survey.Questions?.ToDictionary(q => q.QuestionId, q => string.Empty) ?? new();
			conditions = survey.Questions?.SelectMany(q => q.Conditions ?? []).ToList() ?? [];

			InitShow();
		}
	}

	private void InitShow()
	{
		// 显示所有的题目
		QuestionIsShow = survey.Questions?.ToDictionary(q => q.QuestionId, q => true) ?? new();

		// 隐藏要符合条件才显示的题目
		foreach (var condition in conditions)
		{
			if (condition.Effect == Effect.Show && condition.NextQuestionId != null)
			{
				QuestionIsShow[condition.NextQuestionId.Value] = false;
			}
		}
	}
}

<PageTitle>@(survey.Title ?? "加载中...")</PageTitle>

<FluentStack Orientation="Orientation.Horizontal"
			 HorizontalAlignment="HorizontalAlignment.SpaceBetween">
	<FluentStack Orientation=Orientation.Vertical
				 Width="20%">
	</FluentStack>

	<FluentDivider Role="DividerRole.Presentation" Orientation="Orientation.Vertical"></FluentDivider>

	<FluentStack Orientation=Orientation.Vertical
				 Width="40%">
		<FluentCard>
			<FluentLabel Typo="Typography.HeroTitle">@survey.Title</FluentLabel>
			<FluentLabel Typo="Typography.PaneHeader">@survey.Description</FluentLabel>
		</FluentCard>

		<FluentDivider Style="width: 100%;height:5px;" Role="DividerRole.Presentation"></FluentDivider>

		@if (survey.Questions != null)
			@foreach (var question in survey.Questions)
			{
				@if (QuestionIsShow[question.QuestionId])
				{
					<QuestionComponent Question="question" OnAnswerTextChanged="@(str => HandleValueChanged(question.QuestionId, str))" />
				}
			}

		<FluentDivider Style="width: 100%;height:5px;" Role="DividerRole.Presentation"></FluentDivider>

		<FluentCard Style="height:88px">
			<FluentStack Orientation="Orientation.Vertical"
						 VerticalAlignment="VerticalAlignment.Center"
						 HorizontalAlignment="HorizontalAlignment.Center"
						 Style="height:100%">
				<FluentButton Appearance="Appearance.Accent" Style="width:100%;height:100%" Disabled=true>提交问卷</FluentButton>
			</FluentStack>
		</FluentCard>
	</FluentStack>

	<FluentDivider Role="DividerRole.Presentation" Orientation="Orientation.Vertical"></FluentDivider>

	<FluentStack Orientation=Orientation.Vertical
				 Width="20%">
	</FluentStack>
</FluentStack>

@code {
	private IEnumerable<ConditionDto> conditions = [];

	private Dictionary<int, string> answers = [];

	private Dictionary<int, bool> QuestionIsShow = [];

	private void HandleShow()
	{
		foreach (var condition in conditions)
		{
			if (condition.NextQuestionId == null)
				continue;

			var ans = answers[condition.QuestionId];

			var conditionValue = condition.Value;

			QuestionIsShow[condition.NextQuestionId.Value] = condition.Operator switch
			{
				Operator.Equals => ans == conditionValue,
				Operator.NotEquals => ans != conditionValue,
				Operator.Contains => ans.Contains(conditionValue),
				Operator.GreaterThan => StringOrNumericComparer.Compare(ans, conditionValue) > 0,
				Operator.LessThan => StringOrNumericComparer.Compare(ans, conditionValue) < 0,
				Operator.GreaterThanOrEquals => StringOrNumericComparer.Compare(ans, conditionValue) >= 0,
				Operator.LessThanOrEquals => StringOrNumericComparer.Compare(ans, conditionValue) <= 0,
				_ => false,
			};
		}
	}

	private void HandleValueChanged(int questionId, string newValue)
	{
		answers[questionId] = newValue;
		HandleShow();
	}
}